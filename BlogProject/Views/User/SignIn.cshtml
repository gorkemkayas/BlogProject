@{
    Layout = "_SignInUp";
    ViewData["Title"] = "Signin";
}

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}

@model SignInViewModel

<style>
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3a0ca3;
        --accent-color: #7209b7;
        --light-color: #f8f9fa;
        --dark-color: #212529;
        --success-color: #4cc9f0;
        --danger-color: #f72585;
        --warning-color: #f8961e;
        --info-color: #4895ef;
        --card-shadow: 0 10px 30px -15px rgba(0, 0, 0, 0.2);
        --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    .custom-alert {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        transform: translateX(150%);
        transition: transform 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

    .alert-success {
        background-color: #fff;
        color: var(--success-color);
        border-left: 5px solid var(--success-color);
    }

    .alert-danger {
        background-color: #fff;
        color: var(--danger-color);
        border-left: 5px solid var(--danger-color);
    }

    .custom-alert i {
        margin-right: 10px;
        font-size: 1.2rem;
    }

    .show-alert {
        transform: translateX(0);
    }

    .signin-container {
        max-width: 1200px;
        margin: 5% auto;
        padding: 40px;
        background: white;
        border-radius: 15px;
        box-shadow: var(--card-shadow);
        position: relative;
        overflow: hidden;
    }

        .signin-container:before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 100px;
            height: 100px;
            background: linear-gradient(45deg, rgba(67, 97, 238, 0.1), rgba(114, 9, 183, 0.1));
            border-bottom-left-radius: 100%;
        }

    .form-header {
        text-align: center;
        margin-bottom: 40px;
        position: relative;
    }

        .form-header h2 {
            background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 15px;
        }

        .form-header p {
            color: #6c757d;
            font-size: 1.1rem;
        }

        .form-header a {
            color: var(--primary-color);
            font-weight: 600;
            text-decoration: none;
            transition: var(--transition);
        }

            .form-header a:hover {
                color: var(--accent-color);
                text-decoration: underline;
            }

        .form-header h2:after {
            content: '';
            position: absolute;
            bottom: -15px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
            border-radius: 2px;
        }

    .form-floating {
        position: relative;
        margin-bottom: 25px;
    }

    .form-control {
        height: 60px;
        border-radius: 8px;
        border: 2px solid #e9ecef;
        font-size: 1rem;
        transition: var(--transition);
        padding: 20px 15px 5px 15px;
    }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
        }

    .form-label {
        position: absolute;
        top: 20px;
        left: 15px;
        color: #6c757d;
        transition: var(--transition);
        pointer-events: none;
    }

    .form-control:focus ~ .form-label,
    .form-control:not(:placeholder-shown) ~ .form-label {
        top: 5px;
        left: 15px;
        font-size: 0.8rem;
        color: var(--primary-color);
    }

    .text-danger {
        color: var(--danger-color) !important;
        font-size: 0.85rem;
        margin-top: 5px;
        display: block;
    }

    .btn-signin {
        background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
        color: white;
        padding: 15px 30px;
        font-size: 1.1rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: var(--transition);
        width: 100%;
        font-weight: 600;
        letter-spacing: 1px;
        box-shadow: 0 5px 15px rgba(67, 97, 238, 0.4);
        margin-top: 20px;
    }

        .btn-signin:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(67, 97, 238, 0.5);
            background: linear-gradient(135deg, var(--secondary-color), var(--accent-color));
        }

    .divider {
        display: flex;
        align-items: center;
        margin: 30px 0;
    }

        .divider:before,
        .divider:after {
            content: '';
            flex: 1;
            height: 1px;
            background: #e9ecef;
        }

    .divider-text {
        padding: 0 15px;
        color: #6c757d;
        font-size: 0.9rem;
    }

    .social-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 12px 20px;
        border-radius: 8px;
        font-weight: 600;
        transition: var(--transition);
        margin-bottom: 15px;
        border: 2px solid #e9ecef;
        background: white;
        color: var(--dark-color);
    }

        .social-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .social-btn i {
            margin-right: 10px;
            font-size: 1.2rem;
        }

    .google-btn:hover {
        border-color: #DB4437;
        color: #DB4437;
    }

    .apple-btn:hover {
        border-color: var(--dark-color);
        color: var(--dark-color);
    }

    .facebook-btn:hover {
        border-color: #1877F2;
        color: #1877F2;
    }

    .form-check-input:checked {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .form-check-label {
        color: #495057;
        cursor: pointer;
    }

    .forgot-password {
        color: var(--primary-color);
        text-decoration: none;
        transition: var(--transition);
    }

        .forgot-password:hover {
            color: var(--accent-color);
            text-decoration: underline;
        }

    @@media (max-width: 768px) {
        .signin-container {
            margin: 10% auto;
            padding: 30px 20px;
        }

        .form-header h2 {
            font-size: 2rem;
        }
    }
</style>

<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

@if (TempData["Succeed"] != null)
{
    <div id="successAlert" class="custom-alert alert-success">
        <i class="fa-solid fa-check-circle"></i> @TempData["Succeed"]!.ToString()
    </div>
}
else if (TempData["Failed"] != null)
{
    <div id="errorAlert" class="custom-alert alert-danger">
        <i class="fa-solid fa-exclamation-circle"></i> @TempData["Failed"]!.ToString()
    </div>
}

<!-- Suspension Modal (same as your original but with premium styling) -->
@if (TempData["SuspensionMessage"] != null)
{
    <script>
        window.addEventListener("DOMContentLoaded", function () {
            const modal = new bootstrap.Modal(document.getElementById('suspendedModal'));
            modal.show();
        });
    </script>

    <div class="modal fade" id="suspendedModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content border-0 overflow-hidden" style="border-radius: 12px;">
                <div class="d-flex flex-row">
                    <!-- Gradient Sidebar -->
                    <div class="d-flex flex-column justify-content-between p-5 text-white"
                         style="width: 280px; background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%);">
                        <div>
                            <div class="mb-4">
                                <i class="fas fa-shield-alt fs-1"></i>
                            </div>
                            <h3 class="fw-semibold mb-3">Account Restricted</h3>
                            <p class="small opacity-80">Security measures have been applied to your account</p>
                        </div>
                        <div class="mt-auto">
                            <button class="btn btn-outline-light btn-sm rounded-pill px-3">
                                <i class="fas fa-question-circle me-2"></i>Need Help?
                            </button>
                        </div>
                    </div>

                    <!-- Content Area -->
                    <div class="flex-grow-1 p-4" style="background: #f9fafc;">
                        <button type="button" class="btn-close float-end" data-bs-dismiss="modal" aria-label="Close"></button>

                        <div class="pt-3 pe-3" style="max-height: 400px; overflow-y: auto;">
                            <!-- Suspension Notice -->
                            @if (TempData["SuspensionMessage"] != null)
                            {
                                <div class="alert bg-white border-start border-3 border-primary px-4 py-3 mb-4 shadow-sm">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-info-circle text-primary me-3"></i>
                                        <div>
                                            <h6 class="fw-semibold mb-1">Security Notice</h6>
                                            <p class="small mb-0 text-muted">@TempData["SuspensionMessage"]</p>
                                        </div>
                                    </div>
                                </div>
                            }

                            <!-- Violation Details -->
                            <div class="row g-3">
                                @if (TempData["SuspensionCategory"] != null)
                                {
                                    <div class="col-md-6">
                                        <div class="bg-white p-3 rounded-2 shadow-sm h-100">
                                            <h6 class="fw-semibold text-uppercase small text-muted mb-3">
                                                <i class="fas fa-tag me-2"></i>Violation Type
                                            </h6>
                                            <p class="small mb-3 ms-2">@TempData["SuspensionCategory"]</p>
                                        </div>
                                    </div>
                                }

                                @if (TempData["SuspensionDetail"] != null)
                                {
                                    <div class="col-md-6">
                                        <div class="bg-white p-3 rounded-2 shadow-sm h-100">
                                            <h6 class="fw-semibold text-uppercase small text-muted mb-3">
                                                <i class="fas fa-list-ul me-2"></i>Details
                                            </h6>
                                            <p class="small mb-0">@TempData["SuspensionDetail"]</p>
                                        </div>
                                    </div>
                                }
                            </div>

                            <!-- Action Buttons -->
                            <div class="mt-4 pt-3 border-top">
                                <button class="btn btn-link text-muted me-3" data-bs-dismiss="modal">
                                    Dismiss
                                </button>
                                <button id="contactSupportBtn" class="btn btn-primary px-4 rounded-pill"
                                        style="background: linear-gradient(90deg, var(--primary-color) 0%, var(--accent-color) 100%);">
                                    <i class="fas fa-envelope me-2"></i>Contact Support
                                </button>

                                <script>
                                    document.getElementById('contactSupportBtn').addEventListener('click', function() {
                                        const userId = "@Html.Raw(TempData["SuspendedUserId"]?.ToString())" || "UNKNOWN-" + Math.floor(Math.random() * 10000);
                                        const currentDate = new Date().toLocaleDateString('en-US', {
                                            year: 'numeric',
                                            month: 'long',
                                            day: 'numeric'
                                        });
                                        const emailBody = `User ID: ${userId}\nDate: ${currentDate}\n\nPlease explain your appeal below:\n\n• Reason for appealing this suspension\n• Any supporting evidence\n• Contact information for follow-up`;
                                        window.location.href = `mailto:gorkemkayas@hotmail.com?subject=Account%20Suspension%20Appeal&body=${encodeURIComponent(emailBody)}`;
                                    });
                                </script>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="signin-container">
    <div class="form-header">
        <h2><i class="fas fa-sign-in-alt"></i> Welcome Back</h2>
        <p>Don't have an account? <a asp-controller="User" asp-action="SignUp">Sign up</a></p>
    </div>

    <form asp-controller="User" asp-action="SignIn" asp-route-returnUrl="@Context.Request.Query["returnUrl"]" method="post">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>

        <div class="form-floating">
            <input asp-for="Email" class="form-control" placeholder="name@example.com" required>
            <label asp-for="Email" class="form-label">Email address</label>
            <span class="text-danger" asp-validation-for="Email"></span>
        </div>

        <div class="form-floating">
            <input asp-for="Password" type="password" class="form-control" placeholder="Password" required>
            <label asp-for="Password" class="form-label">Password</label>
            <span class="text-danger" asp-validation-for="Password"></span>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-4">
            <div class="form-check">
                <input asp-for="RememberMe" class="form-check-input" type="checkbox">
                <label asp-for="RememberMe" class="form-check-label">Remember me</label>
            </div>
            <a asp-controller="User" asp-action="ForgetPassword" class="forgot-password">Forgot password?</a>
        </div>

        <button class="btn-signin" type="submit">
            <i class="fas fa-sign-in-alt me-2"></i>Sign In
        </button>
    </form>

    <div class="divider">
        <span class="divider-text">or continue with</span>
    </div>

    <div class="social-login">
        <a href="#" class="social-btn google-btn">
            <i class="fab fa-google text-danger"></i> Continue with Google
        </a>
        <a href="#" class="social-btn apple-btn">
            <i class="fab fa-apple"></i> Continue with Apple
        </a>
        <a href="#" class="social-btn facebook-btn">
            <i class="fab fa-facebook-f text-primary"></i> Continue with Facebook
        </a>
    </div>
</div>

@if (TempData["EmailNotConfirmed"] is bool emailNotConfirmed && emailNotConfirmed)
{
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            Swal.fire({
                title: "Email Confirmation Required",
                text: "You must verify your email address before using your account.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#4361ee",
                cancelButtonColor: "#6c757d",
                confirmButtonText: "Resend Email",
                cancelButtonText: "Cancel",
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    resendEmailConfirmation("@TempData["UserEmail"]");
                }
            });
        });

        function resendEmailConfirmation(email) {
            fetch('/User/ResendEmailConfirmation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ email: email })
            })
            .then(response => {
                if (response.ok) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Email verification link has been sent.',
                        icon: 'success',
                        confirmButtonColor: "#4361ee"
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred. Please try again.',
                        icon: 'error',
                        confirmButtonColor: "#4361ee"
                    });
                }
            });
        }
    </script>
}

<script>
    // Alert animations
    document.addEventListener('DOMContentLoaded', function() {
        const successAlert = document.getElementById('successAlert');
        const errorAlert = document.getElementById('errorAlert');

        if (successAlert) {
            setTimeout(() => {
                successAlert.classList.add('show-alert');
            }, 100);

            setTimeout(() => {
                successAlert.classList.remove('show-alert');
            }, 5000);
        }

        if (errorAlert) {
            setTimeout(() => {
                errorAlert.classList.add('show-alert');
            }, 100);

            setTimeout(() => {
                errorAlert.classList.remove('show-alert');
            }, 5000);
        }
    });
</script>